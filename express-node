const axios = require('axios');

// Assuming you have a base URL for your API
const baseUrl = 'https://your-bookshop-api-url.com';

// Task 1: Get the book list available in the shop
async function getBookList() {
  try {
    const response = await axios.get(`${baseUrl}/books`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 2: Get books based on ISBN
async function getBooksByISBN(isbn) {
  try {
    const response = await axios.get(`${baseUrl}/books?isbn=${isbn}`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 3: Get all books by Author
async function getBooksByAuthor(author) {
  try {
    const response = await axios.get(`${baseUrl}/books?author=${author}`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 4: Get all books based on Title
async function getBooksByTitle(title) {
  try {
    const response = await axios.get(`${baseUrl}/books?title=${title}`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 5: Get book Review
async function getBookReview(bookId) {
  try {
    const response = await axios.get(`${baseUrl}/reviews?bookId=${bookId}`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 6: Register New user
async function registerUser(userData) {
  try {
    const response = await axios.post(`${baseUrl}/register`, userData);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 7: Login as a Registered user
async function loginUser(username, password) {
  try {
    const response = await axios.post(`${baseUrl}/login`, { username, password });
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 8: Add/Modify a book review by a Registered user
async function addModifyReview(userId, bookId, review) {
  try {
    const response = await axios.post(`${baseUrl}/reviews`, { userId, bookId, review });
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 9: Delete book review added by that particular user
async function deleteReview(userId, reviewId) {
  try {
    const response = await axios.delete(`${baseUrl}/reviews/${reviewId}?userId=${userId}`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 10: Get all books using async callback function
function getAllBooksAsyncCallback(callback) {
  axios.get(`${baseUrl}/books`)
    .then(response => callback(null, response.data))
    .catch(error => callback(error, null));
}

// Task 11: Search by ISBN using Promises
function searchByISBNPromise(isbn) {
  return axios.get(`${baseUrl}/books?isbn=${isbn}`)
    .then(response => response.data)
    .catch(error => {
      throw error;
    });
}

// Task 12: Search by Author
async function searchByAuthor(author) {
  try {
    const response = await axios.get(`${baseUrl}/books?author=${author}`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

// Task 13: Search by Title
async function searchByTitle(title) {
  try {
    const response = await axios.get(`${baseUrl}/books?title=${title}`);
    return response.data;
  } catch (error) {
    throw error;
  }
}

module.exports = {
  getBookList,
  getBooksByISBN,
  getBooksByAuthor,
  getBooksByTitle,
  getBookReview,
  registerUser,
  loginUser,
  addModifyReview,
  deleteReview,
  getAllBooksAsyncCallback,
  searchByISBNPromise,
  searchByAuthor,
  searchByTitle,
};
